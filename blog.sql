# ************************************************************
# Sequel Pro SQL dump
# Version 4541
#
# http://www.sequelpro.com/
# https://github.com/sequelpro/sequelpro
#
# Host: 127.0.0.1 (MySQL 5.7.18-log)
# Database: yii2_db
# Generation Time: 2017-07-12 02:37:05 +0000
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table blog_article
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_article`;

CREATE TABLE `blog_article` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `title` varchar(80) NOT NULL DEFAULT '' COMMENT '标题',
  `category` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '类型',
  `content` text NOT NULL COMMENT '内容',
  `browse_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '浏览次数',
  `comment_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '评论次数',
  `collect_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '收藏次数',
  `praise_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '赞次数',
  `tread_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '踩次数',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态（1-显示 2-不显示）',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章表';

LOCK TABLES `blog_article` WRITE;
/*!40000 ALTER TABLE `blog_article` DISABLE KEYS */;

INSERT INTO `blog_article` (`id`, `title`, `category`, `content`, `browse_num`, `comment_num`, `collect_num`, `praise_num`, `tread_num`, `status`)
VALUES
	(1,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(3,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(4,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(5,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(8,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(9,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(10,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(12,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(13,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(14,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(17,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(23,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(24,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(26,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(28,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(33,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(35,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(37,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(41,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(42,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(45,'封装了一个Yii2 redis扩展 支持主从 支持集群',1,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(47,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(48,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(52,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(53,'封装了一个Yii2 redis扩展 支持主从 支持集群',2,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(55,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(56,'封装了一个Yii2 redis扩展 支持主从 支持集群',3,'<h2>邮件配置 <a id=\"email-config\"></a></h2>\n                <p>接下来的文档将详细介绍如何设置 Ghost 邮件，Ghost 使用的是 <a href=\"https://github.com/andris9/Nodemailer\">Nodemailer</a>，在他们的文档中能找到更多的示例。</p>\n                <h3>马上开始</h3>\n                <p>如果你对 PHP 比较熟悉，那么你可能很习惯让你的邮件很神奇地运行在自己的主机平台上。而 Node 会有一些不同，它很新很吸引人，而且依然不是一个很成熟的平台。</p>\n                <p>不过不用怕，设置你的邮件是一次性的，我们来一起搞定它。</p>\n                <h3>为什么需要设置邮件</h3>\n                <p>目前，Ghost 使用邮件只是为了在你忘记密码的时候，发送一个新密码到你的邮箱。它的功能的确不多，但是不要低估它的重要性，我猜你曾经一定在某个时候特别需要它。</p>\n                <p>将来，Ghost 还将支持基于邮件系统的博客订阅。以及通过电子邮件发送新用户的详细信息和其它一些基于邮件系统的小功能。</p>\n                <h2>如何设置？ <a id=\"how-to\"></a></h2>\n                <p>首先，需要你有一个邮件发送服务器的帐号。我们强烈推荐 Mailgun。他们能提供很好的免费入门账户，允许你发送更多的邮件，并且能管理更多的基于邮件订阅的博客。当然你也可以用 Gmail 或者 Amazon SES。</p>\n                <p>一旦你选择了你想要电子邮件服务，你需要将你的设置添加到 Ghost 的配置文件当中。不管你的 Ghost 安装在哪个目录，你应该能在 <code class=\"path\">index.js</code> 所在的目录中找到一个名叫 <code class=\"path\">config.js</code> 的文件，如果没有，可以复制 <code class=\"path\">config.example.js</code> 然后重命名。</p>\n                <h3>Mailgun <a id=\"mailgun\"></a></h3>\n                <p>前往 <a href=\"http://www.mailgun.com/\">mailgun.com</a> 注册一个账户。你需要手头上有一个电子邮件地址，并会被要求提供一个域名或者想出一个子域名。这个选项以后可以修改，所以现在我们先注册一个与博客名称类似的字域名。</p>\n                <p>验证你的邮件地址，然后你将可以访问 Mailgun 可爱的控制面板。你需要通过在右边点击你的域名来找到 Mailgun 提供给你的信的邮件服务用户名和密码（而不是刚刚注册的那个）。下面的小视频可以帮你找到这些东西。</p>\n                <p><img src=\"/images/a1.jpg\" alt=\"Mailgun details\" width=\"100%\">   </p>\n                <p>好了，万事俱备，只欠东风，是时候打开配置文件了。用你喜欢的文本编辑器打开 <code class=\"path\">config.js</code>。找到你想设置邮件的地方，像下面这样修改邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'\',\n                                        pass: \'\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>把你 Mailgun 的登录名填入  \'user\' 后面的引号里面，再把你的 Mailgun 密码填入 \'pass\' 后面的引号里。如果我用 \'tryghosttest\' 账户设置我的 Mailgun，它应该看起来像这样：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    service: \'Mailgun\',\n                                    auth: {\n                                        user: \'postmaster@tryghosttest.mailgun.org\',\n                                        pass: \'25ip4bzyjwo1\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <p>留意所有的冒号、引号和大括号。放错任意一个，等待你的都将是一个莫名其妙的错误结果。</p>\n                <p>如果有条件，你可以为你的开发和生产环境使用重复的设置。</p>\n                <h3>Amazon SES <a id=\"ses\"></a></h3>\n                <p>你可以在 <a href=\"http://aws.amazon.com/ses/\">http://aws.amazon.com/ses/</a> 注册一个 Amazon Simple Email Service 账户。一旦你完成注册，你将得到一个访问密钥和“秘密”（secret）。</p>\n                <p>使用你喜欢的编辑器打开 Ghost 的 <code class=\"path\">config.js</code> 文件，找到你想设置邮件的地方，添加你的 Amazon 证书，如下所示：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SES\',\n                                options: {\n                                    AWSAccessKeyID: \"AWSACCESSKEY\",\n                                    AWSSecretKey: \"/AWS/SECRET\"\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>Gmail <a id=\"gmail\"></a></h3>\n                <p>也可以使用 Gmail 从 Ghost 发送电子邮件。如果你算使用 Gmail，我们建议你 <a href=\"https://accounts.google.com/SignUp\">创建一个新的账户</a> ，而不是使用任何已有的个人账户。</p>\n                <p>当你的新账户创建完成，你可以在 Ghost 的 <code class=\"path\">config.js</code> 文件中修改配置。用你喜欢的文本编辑器打开文件，找到你想设置邮件的地方，像下面这样更改你的邮件设置：</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                transport: \'SMTP\',\n                                options: {\n                                    auth: {\n                                        user: \'youremail@gmail.com\',\n                                        pass: \'yourpassword\'\n                                    }\n                                }\n                            }\n                        </code>\n                    </pre>\n                </div>\n                <h3>发件地址 <a id=\"from\"></a></h3>\n                <p>默认情况下，从 Ghost 发出的邮件发间地址为你在通用设置（settings - general）页面所填写的地址。如果你想使用不同的地址，你也可以在 <code class=\"path\">config.js</code> 文件中修改它。</p>\n                <div class=\"highlight\">\n                    <pre>\n                        <code class=\"text language-text\" data-lang=\"text\">\n                            mail: {\n                                fromaddress: \'myemail@address.com\',\n                            }\n                        </code>\n                    </pre>\n                </div>',0,0,0,0,0,1),
	(57,'状态码 ',4,'构建响应时，最先应做的是标识请求是否成功处理的状态，可通过设置 yii\\web\\Response::statusCode 属性，该属性使用一个有效的 HTTP 状态码。例如，为标识处理已被处理成功， 可设置状态码为200，如下所示：\r\n\r\n```\r\n   Yii::$app->response->statusCode = 200;\r\n```\r\n\r\n尽管如此，大多数情况下不需要明确设置状态码， 因为 yii\\web\\Response::statusCode 状态码默认为200， 如果需要指定请求失败，可抛出对应的HTTP异常，如下所示：\r\n\r\n```\r\nthrow new \\yii\\web\\NotFoundHttpException;\r\n```\r\n\r\n当错误处理器 捕获到一个异常，会从异常中提取状态码并赋值到响应， 对于上述的 yii\\web\\NotFoundHttpException 对应HTTP 404状态码， 以下为Yii预定义的HTTP异常：\r\n\r\n    yii\\web\\BadRequestHttpException：状态码 400。\r\n    yii\\web\\ConflictHttpException：状态码 409。\r\n    yii\\web\\ForbiddenHttpException：状态码 403。\r\n    yii\\web\\GoneHttpException：状态码 410。\r\n    yii\\web\\MethodNotAllowedHttpException：状态码 405。\r\n    yii\\web\\NotAcceptableHttpException：状态码 406。\r\n    yii\\web\\NotFoundHttpException：状态码 404。\r\n    yii\\web\\ServerErrorHttpException：状态码 500。\r\n    yii\\web\\TooManyRequestsHttpException：状态码 429。\r\n    yii\\web\\UnauthorizedHttpException：状态码 401。\r\n    yii\\web\\UnsupportedMediaTypeHttpException：状态码 415。\r\n\r\n如果想抛出的异常不在如上列表中，可创建一个yii\\web\\HttpException异常， 带上状态码抛出，如下：\r\n\r\n```\r\nthrow new \\yii\\web\\HttpException(402);\r\n```',1,0,0,0,0,1),
	(58,'Yii2-响应（Response）状态码 ',4,'构建响应时，最先应做的是标识请求是否成功处理的状态，可通过设置 yii\\web\\Response::statusCode 属性，该属性使用一个有效的 HTTP 状态码。例如，为标识处理已被处理成功， 可设置状态码为200，如下所示：\r\n```\r\nYii::$app->response->statusCode = 200;\r\n```\r\n\r\n尽管如此，大多数情况下不需要明确设置状态码， 因为 yii\\web\\Response::statusCode 状态码默认为200， 如果需要指定请求失败，可抛出对应的HTTP异常，如下所示：\r\n```\r\nthrow new \\yii\\web\\NotFoundHttpException;\r\n```\r\n\r\n当错误处理器 捕获到一个异常，会从异常中提取状态码并赋值到响应， 对于上述的 yii\\web\\NotFoundHttpException 对应HTTP 404状态码， 以下为Yii预定义的HTTP异常：\r\nyii\\web\\BadRequestHttpException：状态码 400。\r\nyii\\web\\ConflictHttpException：状态码 409。\r\nyii\\web\\ForbiddenHttpException：状态码 403。\r\nyii\\web\\GoneHttpException：状态码 410。\r\nyii\\web\\MethodNotAllowedHttpException：状态码 405。\r\nyii\\web\\NotAcceptableHttpException：状态码 406。\r\nyii\\web\\NotFoundHttpException：状态码 404。\r\nyii\\web\\ServerErrorHttpException：状态码 500。\r\nyii\\web\\TooManyRequestsHttpException：状态码 429。\r\nyii\\web\\UnauthorizedHttpException：状态码 401。\r\nyii\\web\\UnsupportedMediaTypeHttpException：状态码 415。\r\n\r\n如果想抛出的异常不在如上列表中，可创建一个yii\\web\\HttpException异常， 带上状态码抛出，如下：\r\n```\r\nthrow new \\yii\\web\\HttpException(402);\r\n```',0,0,0,0,0,1),
	(59,'浏览器跳转',4,'浏览器跳转依赖于发送一个Location HTTP 头， 因为该功能通常被使用，Yii提供对它提供了特别的支持。\r\n\r\n可调用yii\\web\\Response::redirect() 方法将用户浏览器跳转到一个URL地址，该方法设置合适的 带指定URL的 Location 头并返回它自己为响应对象， 在动作的方法中，可调用缩写版yii\\web\\Controller::redirect()，例如：\r\n```\r\npublic function actionIndex()\r\n{\r\n    return $this->redirect(\'http://example.com/new\', 301);\r\n}\r\n```\r\n在如上代码中，动作的方法返回redirect() 方法的结果，如前所述， 动作的方法返回的响应对象会被当总响应发送给终端用户。\r\n\r\n除了动作方法外，可直接调用yii\\web\\Response::redirect() 再调用 yii\\web\\Response::send() 方法来确保没有其他内容追加到响应中。\r\n```\r\n\\Yii::$app->response->redirect(\'http://example.com/new\', 301)->send();\r\n```\r\n> Info: yii\\web\\Response::redirect() 方法默认会设置响应状态码为302，该状态码会告诉浏览器请求的资源 临时 放在另一个URI地址上， 可传递一个301状态码告知浏览器请求的资源已经 永久 重定向到新的URId地址。\r\n\r\n如果当前请求为AJAX 请求， 发送一个 Location 头不会自动使浏览器跳转，为解决这个问题， yii\\web\\Response::redirect() 方法设置一个值为要跳转的URL的X-Redirect 头， 在客户端可编写JavaScript 代码读取该头部值然后让浏览器跳转对应的URL。\r\n> Info: Yii 配备了一个yii.js JavaScript 文件提供常用JavaScript功能，包括基于X-Redirect头的浏览器跳转， 因此，如果你使用该JavaScript 文件(通过yii\\web\\YiiAsset 资源包注册)， 就不需要编写AJAX跳转的代码。\r\n\r\n\r\n',1,0,0,0,0,1),
	(60,'发送文件和下载文件',4,'和浏览器跳转类似，文件发送是另一个依赖指定HTTP头的功能， Yii提供方法集合来支持各种文件发送需求，它们对HTTP头都有内置的支持。\r\n\r\n这些方法都将响应对象作为返回值，如果要发送的文件非常大，应考虑使用 yii\\web\\Response::sendStreamAsFile() 因为它更节约内存， 以下示例显示在控制器动作中如何发送文件：\r\n```\r\npublic function actionDownload()\r\n{\r\n    return \\Yii::$app->response->sendFile(\'images/pay_qr_code\');\r\n}\r\n```\r\n\r\n如果不是在动作方法中调用文件发送方法， 在后面还应调用 yii\\web\\Response::send() 没有其他内容追加到响应中。\r\n```\r\n\\Yii::$app->response->sendFile(\'images/pay_qr_code\')->send();\r\n```\r\n\r\n一些浏览器提供特殊的名为X-Sendfile的文件发送功能， 原理为将请求跳转到服务器上的文件， Web应用可在服务器发送文件前结束，为使用该功能， 可调用yii\\web\\Response::xSendFile()， 如下简要列出一些常用Web服务器如何启用X-Sendfile 功能：\r\nApache: X-Sendfile\r\nLighttpd v1.4: X-LIGHTTPD-send-fileLig\r\nhttpd v1.5: X-Sendfile\r\nNginx: X-Accel-Redirect\r\nCherokee: X-Sendfile and X-Accel-Redirect\r\n\r\n',0,0,0,0,0,1),
	(61,'Session存储 ',4,'学习如何配置和使用这些组件类请参考它们的API文档，如下为一个示例 显示如何在应用配置中配置yii\\web\\DbSession 将数据表作为session存储介质。\r\n```\r\nreturn [\r\n    \'components\' => [\r\n        \'session\' => [\r\n            \'class\' => \'yii\\web\\DbSession\',\r\n            // \'db\' => \'mydb\',  // 数据库连接的应用组件ID，默认为\'db\'.\r\n            // \'sessionTable\' => \'my_session\', // session 数据表名，默认为\'session\'.\r\n        ],\r\n    ],\r\n];\r\n```\r\n也需要创建如下数据库表来存储session数据：\r\n```\r\nCREATE TABLE session\r\n(\r\n    id CHAR(40) NOT NULL PRIMARY KEY,\r\n    expire INTEGER,\r\n    data BLOB\r\n)\r\n```\r\n其中\'BLOB\' 对应你选择的数据库管理系统的BLOB-type类型，以下一些常用数据库管理系统的BLOB类型：\r\nMySQL: LONGBLOB\r\nPostgreSQL: BYTEA\r\nMSSQL: BLOB\r\n\r\n```\r\n注意: 根据php.ini 设置的 session.hash_function，你需要调整id列的长度， 例如，如果 session.hash_function=sha256 ， 应使用长度为64而不是40的char类型。\r\n```\r\n',0,0,0,0,0,1),
	(62,'日志',4,'Yii提供了一个强大的日志框架，这个框架具有高度的可定制性和可扩展性。使用这个框架， 你可以轻松地记录各种类型的消息，过滤它们， 并且将它们收集到不同的目标，诸如文件，数据库，邮件。\r\n\r\n使用Yii日志框架涉及下面的几个步骤：\r\n- 这里是列表文本在你代码里的各个地方记录 log messages；\r\n- 这里是列表文本在应用配置里通过配置 log targets 来过滤和导出日志消息；\r\n- 这里是列表文本检查由不同的目标导出的已过滤的日志消息（例如：Yii debugger）。\r\n\r\n在这部分，我们主要描述前两个步骤。\r\n\r\n### 日志消息\r\n记录日志消息就跟调用下面的日志方法一样简单：\r\n- 这里是列表文本Yii::trace()：记录一条消息去跟踪一段代码是怎样运行的。这主要在开发的时候使用。\r\n- 这里是列表文本Yii::info()：记录一条消息来传达一些有用的信息。\r\n- 这里是列表文本Yii::warning()：记录一个警告消息用来指示一些已经发生的意外。\r\n- 这里是列表文本Yii::error()：记录一个致命的错误，这个错误应该尽快被检查。\r\n\r\n这些日志记录方法针对 严重程度 和 类别 来记录日志消息。 它们共享相同的函数签名 function ($message, $category = \'application\')，$message代表要被 记录的日志消息，而 $category 是日志消息的类别。在下面的示例代码中，在默认的类别 application 下 记录了一条跟踪消息：\r\n```\r\nYii::trace(\'start calculating average revenue\');\r\n```\r\n> 注意: 日志消息可以是字符串，也可以是复杂的数据，诸如数组或者对象。 log targets 的义务是正确处理日志消息。默认情况下， 假如一条日志消息不是一个字符串，它将被导出为一个字符串，通过调用 yii\\helpers\\VarDumper::export()。\r\n\r\n为了更好地组织和过滤日志消息，我们建议您为每个日志消息指定一个适当的类别。您可以为类别选择一个分层命名方案， 这将使得 log targets 在基于它们的分类来过滤消息变得更加容易。 一个简单而高效的命名方案是使用PHP魔术常量 __METHOD__ 作为分类名称。 这种方式也在Yii框架的核心代码中得到应用， 例如，\r\n```\r\nYii::trace(\'start calculating average revenue\', __METHOD__);\r\n```\r\n__METHOD__ 常量计算值作为该常量出现的地方的方法名（完全限定的类名前缀）。 例如，假如上面那行代码在这个方法内被调用，则它将等于字符串 \'app\\controllers\\RevenueController::calculate\'。\r\n> 注意: 上面所描述的日志方法实际上是 logger object 对象（一个通过表达式 Yii::getLogger() 可访问的单例） 的方法 log() 的一个快捷方式。当足够的消息被记录或者当应用结束时， 日志对象将会调用一个 message dispatcher 调度对象将已经记录的日志消息发送到已注册的 log targets 目标中。\r\n\r\n### 日志目标\r\n一个日志目标是一个 yii\\log\\Target 类或者它的子类的实例。 它将通过他们的严重层级和类别来过滤日志消息，然后将它们导出到一些媒介中。 例如，一个 database target 目标导出已经过滤的日志消息到一个数据的表里面， 而一个 email target目标将日志消息导出到指定的邮箱地址里。\r\n\r\n在一个应用里，通过配置在应用配置里的 log application component ，你可以注册多个日志目标。 就像下面这样：\r\n```\r\nreturn [\r\n    // the \"log\" component must be loaded during bootstrapping time\r\n    \'bootstrap\' => [\'log\'],\r\n    \r\n    \'components\' => [\r\n        \'log\' => [\r\n            \'targets\' => [\r\n                [\r\n                    \'class\' => \'yii\\log\\DbTarget\',\r\n                    \'levels\' => [\'error\', \'warning\'],\r\n                ],\r\n                [\r\n                    \'class\' => \'yii\\log\\EmailTarget\',\r\n                    \'levels\' => [\'error\'],\r\n                    \'categories\' => [\'yii\\db\\*\'],\r\n                    \'message\' => [\r\n                       \'from\' => [\'log@example.com\'],\r\n                       \'to\' => [\'admin@example.com\', \'developer@example.com\'],\r\n                       \'subject\' => \'Database errors at example.com\',\r\n                    ],\r\n                ],\r\n            ],\r\n        ],\r\n    ],\r\n];\r\n```\r\n> 注意: log 组件必须在 bootstrapping 期间就被加载，以便于它能够及时调度日志消息到目标里。 这是为什么在上面的代码中，它被列在 bootstrap 数组中的原因。\r\n在上面的代码中，在 yii\\log\\Dispatcher::$targets 属性里有两个日志目标被注册：\r\n- 第一个目标选择的是错误和警告层级的消息，并且在数据库表里保存他们；\r\n- 第二个目标选择的是错误层级的消息并且是在以 yii\\db\\ 开头的分类下，并且在一个邮件里将它们发送到 admin@example.com 和 developer@example.com。\r\n\r\nYii配备了以下的内建日志目标。请参考关于这些类的API文档， 并且学习怎样配置和使用他们。\r\n- 这里是列表文本yii\\log\\DbTarget：在数据库表里存储日志消息。\r\n- yii\\log\\EmailTarget：发送日志消息到预先指定的邮箱地址。\r\n- yii\\log\\FileTarget：保存日志消息到文件中.\r\n- yii\\log\\SyslogTarget：通过调用PHP函数 syslog() 将日志消息保存到系统日志里。\r\n\r\n下面，我们将描述所有日志目标的公共特性。',0,0,0,0,0,1),
	(63,'创建表单',4,'在控制器中，我们将传递一个模型的实例到视图，其中 ActiveForm 小部件用来显示表单：\r\n```\r\n<?php\r\nuse yii\\helpers\\Html;\r\nuse yii\\widgets\\ActiveForm;\r\n\r\n$form = ActiveForm::begin([\r\n    \'id\' => \'login-form\',\r\n    \'options\' => [\'class\' => \'form-horizontal\'],\r\n]) ?>\r\n    <?= $form->field($model, \'username\') ?>\r\n    <?= $form->field($model, \'password\')->passwordInput() ?>\r\n\r\n    <div class=\"form-group\">\r\n        <div class=\"col-lg-offset-1 col-lg-11\">\r\n            <?= Html::submitButton(\'Login\', [\'class\' => \'btn btn-primary\']) ?>\r\n        </div>\r\n    </div>\r\n<?php ActiveForm::end() ?>\r\n```\r\n```\r\n// 一个密码输入框\r\n<?= $form->field($model, \'password\')->passwordInput() ?>\r\n// 增加一个提示标签\r\n<?= $form->field($model, \'username\')->textInput()->hint(\'Please enter your name\')->label(\'Name\') ?>\r\n// 创建一个 HTML5 邮箱输入框\r\n<?= $form->field($model, \'email\')->input(\'email\') ?>\r\n```\r\n指定模型的属性可以以更复杂的方式来完成。例如，当上传时，多个文件 或选择多个项目的属性，可能需要一个数组值，你可以通过附加 [] 来 指定它的属性名称：\r\n```\r\n// 允许多个文件被上传：\r\necho $form->field($model, \'uploadFile[]\')->fileInput([\'multiple\'=>\'multiple\']);\r\n\r\n// 允许进行选择多个项目：\r\necho $form->field($model, \'items[]\')->checkboxList([\'a\' => \'Item A\', \'b\' => \'Item B\', \'c\' => \'Item C\']);\r\n```\r\n可以使用 ActiveForm 的 dropDownList() 方法来创建一个下拉列表：\r\n```\r\necho $form->field($model, \'product_category\')->dropdownList(\r\n    [\'a\' => \'Item A\', \'b\' => \'Item B\', \'c\' => \'Item C\'],\r\n    [\'prompt\'=>\'Select Category\']\r\n);\r\n```\r\n> 提示: 为了设计带星号的表单字段，你可以使用下面的 CSS：\r\n```\r\ndiv.required label:after {\r\n    content: \" *\";\r\n    color: red;\r\n}\r\n```\r\n',0,0,0,0,0,1),
	(64,'输入验证',4,'### 条件式验证\r\n若要只在某些条件满足时，才验证相关特性，比如：是否验证某特性取决于另一特性的值， 你可以通过when 属性来定义相关条件。举例而言，\r\n```\r\n[\'state\', \'required\', \'when\' => function($model) {\r\n        return $model->country == \'USA\';\r\n    }]\r\n```\r\n\r\n若你需要支持客户端的条件验证，你应该配置whenClient 属性， 它会读入一条包含有 JavaScript 函数的字符串。 这个函数将被用于确定该客户端验证规则是否被启用。比如，\r\n```\r\n[\'state\', \'required\', \'when\' => function ($model) {\r\n        return $model->country == \'USA\';\r\n    }, \'whenClient\' => \"function (attribute, value) {\r\n        \r\n```\r\n\r\n### 数据预处理 \r\n用户输入经常需要进行数据过滤，或者叫预处理。比如你可能会需要先去掉 username 输入的收尾空格。 你可以通过使用验证规则来实现此目的。\r\n\r\n下面的例子展示了如何去掉输入信息的首尾空格，并将空输入返回为 null。具体方法为通过调用 trim 和 default 核心验证器：\r\n```\r\nreturn [\r\n    [[\'username\', \'email\'], \'trim\'],\r\n    [[\'username\', \'email\'], \'default\'],\r\n];\r\n```\r\n\r\n### 处理空输入\r\n```\r\nreturn [\r\n    // 若 \"username\" 和 \"email\" 为空，则设为 null\r\n    [[\'username\', \'email\'], \'default\'],\r\n\r\n    // 若 \"level\" 为空，则设其为 1\r\n    [\'level\', \'default\', \'value\' => 1],\r\n];\r\n```\r\n\r\n### 临时验证\r\n```\r\n$email = \'test@example.com\';\r\n$validator = new yii\\validators\\EmailValidator();\r\n\r\nif ($validator->validate($email, $error)) {\r\n    echo \'有效的 Email 地址。\';\r\n} else {\r\n    echo $error;\r\n}\r\n```',0,0,0,0,0,1),
	(65,'数据格式器',4,'1. 这里是列表文本配置 Formatter\r\n2. 这里是列表文本里是列表文本格式化时间/日期数据\r\n3. 这里是列表文本格式化数字\r\n4. 这里是列表文本其他的格式化\r\n5. 这里是列表文本空值\r\n6. 这里是列表文本本地日期格式化\r\n\r\n你可以使用 formatter application component 来格式化数据。 默认 fomatter 由 yii\\i18n\\Formatter 来实现，这个组件提供了一系列关于日期/时间，数字，货币等的格式化方法。 使用方法如下：\r\n```\r\n$formatter = \\Yii::$app->formatter;\r\n\r\n// output: January 1, 2014\r\necho $formatter->asDate(\'2014-01-01\', \'long\');\r\n \r\n// output: 12.50%\r\necho $formatter->asPercent(0.125, 2);\r\n \r\n// output: <a href=\"mailto:cebe@example.com\">cebe@example.com</a>\r\necho $formatter->asEmail(\'cebe@example.com\'); \r\n\r\n// output: Yes\r\necho $formatter->asBoolean(true); \r\n// it also handles display of null values:\r\n\r\n// output: (Not set)\r\necho $formatter->asDate(null); \r\n```\r\n我们可以看到，所有的方法都形似 asXyz()，这个 Xzy 就是所支持的格式化类型。 当然你也可以使用类方法 format() 来进行格式化，通过这个类方法，你可以更自由地控制格式化的数据，这时候，类方法通常配合 yii\\grid\\GridView 或者 yii\\widgets\\DetailView 来使用。\r\n\r\n举个例子：\r\n```\r\n// output: January 1, 2014\r\necho Yii::$app->formatter->format(\'2014-01-01\', \'date\'); \r\n\r\n// 你可以在第二个参数指定一个数组，这个数组提供了一些配置的参数\r\n// 例如这个 2 就是 asPercent() 方法的 $decimals 参数\r\n// output: 12.50%\r\necho Yii::$app->formatter->format(0.125, [\'percent\', 2]); \r\n```\r\n### 格式化时间/日期数据\r\n```\r\n// ICU format\r\necho Yii::$app->formatter->asDate(\'now\', \'yyyy-MM-dd\'); // 2014-10-06\r\n\r\n// PHP date()-format\r\necho Yii::$app->formatter->asDate(\'now\', \'php:Y-m-d\'); // 2014-10-06\r\n\r\n```\r\n### 格式化数字\r\n> integer: 这个变量将被格式化为整形 e.g. 42.\r\ndecimal: 这个变量将被格式化为带着逗号的指定精度的浮点型 e.g. 2,542.123 or 2.542,123.\r\npercent: 这个变量将被格式化为百分比 e.g. 42%.\r\nscientific: 这个变量将被格式化为科学计数法 e.g. 4.2E4.\r\ncurrency: 这个变量将被格式化为货币 £420.00. 使用这个方法前请确认是否已经正确配置 locale\r\nsize: 这个变量将被格式化为人类可读的字节数 e.g. 410 kibibytes.\r\nshortSize: 这个变量将被格式化为人类可读的字节数（缩写） size, e.g. 410 KiB.\r\n\r\n### 其他的格式化\r\n> raw: 除了 null 会被 nullDisplay 格式化外，原样输出。\r\ntext: 编码为 HTML 格式。同时这也是 GridView DataColumn 默认使用的方法。\r\nntext: 编码为 HTML 格式，换行也将被转换。\r\nparagraphs: 编码为 HTML 格式，以 <p> 标签包裹。\r\nhtml: 这个数值将会被 HtmlPurifier 来进行过滤来防御 XSS 攻击，你可以添加一些配置例如 [\'html\', [\'Attr.AllowedFrameTargets\' => [\'_blank\']]]。\r\nemail: 这个数值将被转换为 mailto 链接。\r\nboolean: true => Yes, false => No，可以进行另外的配置： yii\\i18n\\Formatter::$booleanFormat 。\r\n',1,0,0,0,0,1),
	(66,'客户端脚本使用',4,'### 注册脚本\r\n你可以使用 yii\\web\\View 对象注册脚本。这里有两个专门的方法： \r\n（1）registerJs() 用于内联脚本。 \r\n（2）registerJsFile() 用于注册引入外部脚本文件。 内联脚本通常用于配置和动态生成代码。 这个方法的使用可以像下面这样：\r\n```\r\n$this->registerJs(\"var options = \".json_encode($options).\";\", View::POS_END, \'my-options\');\r\n```\r\n第一个参数是我们想插入的实际JS代码。 第二个参数确定了JS代码插入页面的位置。可用的值如下：\r\n- 这里是列表文本View::POS_HEAD 用在HEAD部分。\r\n- 这里是列表文本View::POS_BEGIN 用在 <body> 标签的右边。\r\n- 这里是列表文本View::POS_END 用在 </body> 标签的左边。\r\n- 这里是列表文本View::POS_READY 为了在 ready 事件中执行代码，这里将自动注册jQuery。\r\n- 这里是列表文本View::POS_LOAD 为了在 load 事件中执行代码，这里将自动注册jQuery。\r\n\r\n最后一个参数是一个唯一的脚本ID，主要是用于标识一段代码块，在添加一段新的代码块时，如果当前页面已经存在同样ID代码块时，那么将会被新的替换。 如果你不传这个参数，JS代码本身将会作为ID来使用。\r\n\r\n外部脚本的引入使用像下面这样：\r\n```\r\n$this->registerJsFile(\'http://example.com/js/main.js\', [\'depends\' => [\\yii\\web\\JqueryAsset::className()]]);\r\n```',1,0,0,0,0,1),
	(67,'用户登录 - 认证',4,'认证是鉴定用户身份的过程。它通常使用一个标识符 （如用户名或电子邮件地址）和一个加密令牌（比如密码或者存取令牌）来 鉴别用户身份。认证是登录功能的基础。\r\n\r\nYii提供了一个认证框架，它连接了不同的组件以支持登录。欲使用这个框架， 你主要需要做以下工作：\r\n- 设置用户组件 user ;\r\n- 创建一个类实现 yii\\web\\IdentityInterface 接口。\r\n\r\n### 配置 [yii\\web\\User ](http://www.yiichina.com/doc/api/2.0/yii-web-user)\r\n用户组件 user 用来管理用户的认证状态。这需要你 指定一个含有实际认证逻辑的认证类 identity class。 在以下web应用的配置项中，将用户用户组件 user 的 认证类 identity class 配置成 模型类 app\\models\\User， 它的实现将在下一节中讲述。 \r\n```\r\nreturn [\r\n    \'components\' => [\r\n        \'user\' => [\r\n            \'identityClass\' => \'app\\models\\User\',\r\n        ],\r\n    ],\r\n```\r\n\r\n### 认证接口 yii\\web\\IdentityInterface 的实现\r\n认证类 identity class 必须实现包含以下方法的 认证接口 yii\\web\\IdentityInterface：\r\n- findIdentity()：根据指定的用户ID查找 认证模型类的实例，当你需要使用session来维持登录状态的时候会用到这个方法。\r\n- findIdentityByAccessToken()：根据指定的存取令牌查找 认证模型类的实例，该方法用于 通过单个加密令牌认证用户的时候（比如无状态的RESTful应用）。\r\n- getId()：获取该认证实例表示的用户的ID。\r\n- getAuthKey()：获取基于 cookie 登录时使用的认证密钥。 认证密钥储存在 cookie 里并且将来会与服务端的版本进行比较以确保 cookie的有效性。\r\n- validateAuthKey() ：是基于 cookie 登录密钥的 验证的逻辑的实现。\r\n\r\n### 使用用户组件 yii\\web\\User\r\n在 user 应用组件方面，你主要用到 yii\\web\\User 。\r\n\r\n你可以使用表达式 Yii::$app->user->identity 检测当前用户身份。它返回 一个表示当前登录用户的认证类 identity class 的实例， 未认证用户（游客）则返回 null。下面的代码展示了如何从 yii\\web\\User 获取其他认证相关信息：\r\n```\r\n// 当前用户的身份实例。未认证用户则为 Null 。\r\n$identity = Yii::$app->user->identity;\r\n\r\n// 当前用户的ID。 未认证用户则为 Null 。\r\n$id = Yii::$app->user->id;\r\n\r\n// 判断当前用户是否是游客（未认证的）\r\n$isGuest = Yii::$app->user->isGuest;\r\n```\r\n',1,0,0,0,0,1),
	(68,'授权',4,'存取控制过滤器（ACF）是一种通过 yii\\filters\\AccessControl 类来实现的简单授权方法， 非常适用于仅需要简单的存取控制的应用。正如其名称所指，ACF 是一种动作过滤器 filter，可在控制器或者模块中使用。当一个用户请求一个动作时， ACF会检查 access rules 列表，判断该用户是否允许执 行所请求的动作。\r\n\r\n下述代码展示如何在 site 控制器中使用 ACF：\r\n```\r\nuse yii\\web\\Controller;\r\nuse yii\\filters\\AccessControl;\r\n\r\nclass SiteController extends Controller\r\n{\r\n    public function behaviors()\r\n    {\r\n        return [\r\n            \'access\' => [\r\n                \'class\' => AccessControl::className(),\r\n                \'only\' => [\'login\', \'logout\', \'signup\'],\r\n                \'rules\' => [\r\n                    [\r\n                        \'allow\' => true,\r\n                        \'actions\' => [\'login\', \'signup\'],\r\n                        \'roles\' => [\'?\'],\r\n                    ],\r\n                    [\r\n                        \'allow\' => true,\r\n                        \'actions\' => [\'logout\'],\r\n                        \'roles\' => [\'@\'],\r\n                    ],\r\n                ],\r\n            ],\r\n        ];\r\n    }\r\n    // ...\r\n}\r\n```\r\n上面的代码中 ACF 以行为 (behavior) 的形式附加到 site 控制器。 这就是很典型的使用行动过滤器的方法。 only 选项指明 ACF 应当只 对 login， logout 和 signup 方法起作用。所有其它的 site 控制器中的方法不受存取控制的限制。 rules 选项列出了 存取规则 (access rules)，解读如下：\r\n- 允许所有访客（还未经认证的用户）执行 login 和 signup 动作。 roles 选项包含的问号 ? 是一个特殊的标识，代表”访客用户”。\r\n- 允许已认证用户执行 logout 动作。@是另一个特殊标识， 代表”已认证用户”。\r\n\r\nAccess rules 支持很多的选项。下列是所支持选项的总览。 你可以派生 yii\\filters\\AccessRule 来创建自定义的存取规则类。\r\n- allow： 指定该规则是 \"允许\" 还是 \"拒绝\" 。（译者注：true是允许，false是拒绝）\r\n- actions：指定该规则用于匹配哪些动作。 它的值应该是动作方法的ID数组。匹配比较是大小写敏感的。如果该选项为空，或者不使用该选项， 意味着当前规则适用于所有的动作。\r\n- controllers：指定该规则用于匹配哪些控制器。 它的值应为控制器ID数组。匹配比较是大小写敏感的。如果该选项为空，或者不使用该选项， 则意味着当前规则适用于所有的动作。（译者注：这个选项一般是在控制器的自定义父类中使用才有意义）\r\n- roles：指定该规则用于匹配哪些用户角色。 系统自带两个特殊的角色，通过 yii\\web\\User::isGuest 来判断：\r\n> ?： 用于匹配访客用户 （未经认证）\r\n@： 用于匹配已认证用户\r\n\r\n- 使用其他角色名时，将触发调用 yii\\web\\User::can()，这时要求 RBAC 的支持 （在下一节中阐述）。 如果该选项为空或者不使用该选项，意味着该规则适用于所有角色。\r\n- ips：指定该规则用于匹配哪些 yii\\web\\Request::userIP 。 IP 地址可在其末尾包含通配符 * 以匹配一批前缀相同的IP地址。 例如，192.168.* 匹配所有 192.168. 段的IP地址。 如果该选项为空或者不使用该选项，意味着该规则适用于所有角色。\r\n- verbs：指定该规则用于匹配哪种请求方法（例如GET，POST）。 这里的匹配大小写不敏感。\r\n- matchCallback：指定一个PHP回调函数用于 判定该规则是否满足条件。（译者注：此处的回调函数是匿名函数）\r\n\r\n当这个规则不满足条件时该函数会被调用。（译者注：此处的回调函数是匿名函数）\r\n以下例子展示了如何使用 matchCallback 选项， 可使你设计任意的访问权限检查逻辑：\r\n```\r\nuse yii\\filters\\AccessControl;\r\n\r\nclass SiteController extends Controller\r\n{\r\n    public function behaviors()\r\n    {\r\n        return [\r\n            \'access\' => [\r\n                \'class\' => AccessControl::className(),\r\n                \'only\' => [\'special-callback\'],\r\n                \'rules\' => [\r\n                    [\r\n                        \'actions\' => [\'special-callback\'],\r\n                        \'allow\' => true,\r\n                        \'matchCallback\' => function ($rule, $action) {\r\n                            return date(\'d-m\') === \'31-10\';\r\n                        }\r\n                    ],\r\n                ],\r\n            ],\r\n        ];\r\n    }\r\n\r\n    // 匹配的回调函数被调用了！这个页面只有每年的10月31号能访问（译者注：原文在这里说该方法是回调函数不确切，读者不要和 `matchCallback` 的值即匿名的回调函数混淆理解）。\r\n    public function actionSpecialCallback()\r\n    {\r\n        return $this->render(\'happy-halloween\');\r\n    }\r\n}\r\n```\r\n\r\n\r\n',0,0,0,0,0,1),
	(69,'数据缓存',4,'数据缓存是指将一些 PHP 变量存储到缓存中，使用时再从缓存中取回。 它也是更高级缓存特性的基础，例如查询缓存 和内容缓存。\r\n\r\n如下代码是一个典型的数据缓存使用模式。其中 $cache 指向 缓存组件：\r\n```\r\n// 尝试从缓存中取回 $data \r\n$data = $cache->get($key);\r\n\r\nif ($data === false) {\r\n\r\n    // $data 在缓存中没有找到，则重新计算它的值\r\n\r\n    // 将 $data 存放到缓存供下次使用\r\n    $cache->set($key, $data);\r\n}\r\n\r\n// 这儿 $data 可以使用了。\r\n\r\n```\r\n### 缓存组件\r\n数据缓存需要缓存组件提供支持，它代表各种缓存存储器， 例如内存，文件，数据库。\r\n\r\n缓存组件通常注册为应用程序组件，这样 它们就可以在全局进行配置与访问。 如下代码演示了如何配置应用程序组件 cache 使用 两个 memcached 服务器：\r\n```\r\n\'components\' => [\r\n    \'cache\' => [\r\n        \'class\' => \'yii\\caching\\MemCache\',\r\n        \'servers\' => [\r\n            [\r\n                \'host\' => \'server1\',\r\n                \'port\' => 11211,\r\n                \'weight\' => 100,\r\n            ],\r\n            [\r\n                \'host\' => \'server2\',\r\n                \'port\' => 11211,\r\n                \'weight\' => 50,\r\n            ],\r\n        ],\r\n    ],\r\n],\r\n```\r\n然后就可以通过 Yii::$app->cache 访问上面的缓存组件了。\r\n\r\n由于所有缓存组件都支持同样的一系列 API ，并不需要修改使用缓存的 业务代码就能直接替换为其他底层缓存组件，只需在应用配置中重新配置一下就可以。 例如，你可以将上述配置修改为使用 APC cache:\r\n```\r\n\'components\' => [\r\n    \'cache\' => [\r\n        \'class\' => \'yii\\caching\\ApcCache\',\r\n    ],\r\n],\r\n```\r\n### 支持的缓存存储器\r\nYii 支持一系列缓存存储器，概况如下：\r\n- yii\\caching\\ApcCache：使用 PHP APC 扩展。这个选项可以 认为是集中式应用程序环境中（例如：单一服务器， 没有独立的负载均衡器等）最快的缓存方案。\r\n- yii\\caching\\DbCache：使用一个数据库的表存储缓存数据。要使用这个缓存，你必须 创建一个与 yii\\caching\\DbCache::$cacheTable 对应的表。\r\n这里是列表文本这个组件的目的是为了简化那些需要查询缓存有效性的代码。 例如，在开发中如果服务器没有实际的缓存支持，用它配置 一个缓存组件。一个真正的缓存服务启用后，可以再切换为使用相应的缓存组件。 两种条件下你都可以使用同样的代码 Yii::$app->cache->get($key) 尝试从缓存中取回数据而不用担心 Yii::$app->cache 可能是 null。\r\n- yii\\caching\\FileCache：使用标准文件存储缓存数据。这个特别适用于 缓存大块数据，例如一个整页的内容。\r\n- yii\\caching\\MemCache：使用 PHP memcache 和 memcached 扩展。 这个选项被看作分布式应用环境中（例如：多台服务器， 有负载均衡等）最快的缓存方案。\r\n- yii\\redis\\Cache：实现了一个基于 Redis 键值对存储器 的缓存组件（需要 redis 2.6.12 及以上版本的支持 ）。\r\n- yii\\caching\\WinCache：使用 PHP WinCache （另可参考 ）扩展。\r\n- yii\\caching\\XCache：使用 PHP XCache扩展。\r\n- yii\\caching\\ZendDataCache：使用 Zend Data Cache 作为底层缓存媒介。\r\n\r\n### 缓存 API\r\n所有缓存组件都有同样的基类 yii\\caching\\Cache ，因此都支持如下 API：\r\n- get()：通过一个指定的键（key）从缓存中取回一项数据。如果该项数据 不存在于缓存中或者已经过期/失效，则返回值 false。\r\n- set()：将一项数据指定一个键，存放到缓存中。\r\n- add()：如果缓存中未找到该键，则将指定数据存放到缓存中。\r\n- mget()：通过指定的多个键从缓存中取回多项数据。\r\n- mset()：将多项数据存储到缓存中，每项数据对应一个键。\r\n- madd()：将多项数据存储到缓存中，每项数据对应一个键。 如果某个键已经存在于缓存中，则该项数据会被跳过。\r\n- exists()：返回一个值，指明某个键是否存在于缓存中。\r\n- delete()：通过一个键，删除缓存中对应的值。\r\n- flush()：删除缓存中的所有数据。\r\n\r\n### 缓存过期\r\n默认情况下，缓存中的数据会永久存留，除非它被某些缓存策略强制移除（例如： 缓存空间已满，最老的数据会被移除）。要改变此特性，你可以在调用 set() 存储一项数据时提供一个过期时间参数。 该参数代表这项数据在缓存中可保持有效多少秒。当你调用 get() 取回数据时，如果它已经过了超时时间， 该方法将返回 false，表明在缓存中找不到这项数据。例如：\r\n```\r\n$cache->set($key, $data, 45);\r\n\r\nsleep(50);\r\n\r\n$data = $cache->get($key);\r\nif ($data === false) {\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n',1,0,0,0,0,1),
	(70,'片段缓存',4,'片段缓存指的是缓存页面内容中的某个片段。例如，一个页面显示了逐年销售额的摘要表格， 可以把表格缓存下来，以消除每次请求都要重新生成表格 的耗时。片段缓存是基于数据缓存实现的。\r\n\r\n在视图中使用以下结构启用片段缓存：\r\n```\r\nif ($this->beginCache($id)) {\r\n\r\n    // ... 在此生成内容 ...\r\n\r\n  $this->endCache();\r\n}\r\n```\r\n调用 beginCache() 和 endcache() 方法包裹内容生成逻辑。如果缓存中存在该内容，beginCache() 方法将渲染内容并返回 false，因此将跳过内容生成逻辑。否则， 内容生成逻辑被执行，一直执行到 endCache() 时，生成的内容将被捕获并存储在缓存中。\r\n\r\n和[[数据缓存]](caching-data.md)一样，每个片段缓存也需要全局唯一的 $id 标记。\r\n\r\n### 缓存选项\r\n如果要为片段缓存指定额外配置项，请通过向 beginCache() 方法第二个参数传递配置数组。在框架内部， 该数组将被用来配置一个 yii\\widget\\FragmentCache 小部件用以实现片段缓存功能。\r\n\r\n### 过期时间（duration）\r\n或许片段缓存中最常用的一个配置选项就是 duration 了。 它指定了内容被缓存的秒数。以下代码缓存内容最多一小时：\r\n```\r\nif ($this->beginCache($id, [\'duration\' => 3600])) {\r\n\r\n    // ... 在此生成内容 ...\r\n\r\n    $this->endCache();\r\n}\r\n```\r\n### 动态内容\r\n使用片段缓存时，可能会遇到一大段较为静态的内容中有少许动态内 容的情况。例如，一个显示着菜单栏和当前用户名的页面头部。还有 一种可能是缓存的内容可能包含每次请求都需要执行的 PHP 代码 （例如注册资源包的代码）。这两个问题都可以 使用 动态内容 功能解决。\r\n\r\n动态内容的意思是这部分输出的内容不该被缓存，即便是它被包裹 在片段缓存中。为了使内容保持动态，每次请求都执行 PHP 代码 生成，即使这些代码已经被缓存了。\r\n\r\n可以在片段缓存中调用 yii\\base\\View::renderDynamic() 去 插入动态内容，如下所示：\r\n```\r\nif ($this->beginCache($id1)) {\r\n\r\n    // ...在此生成内容...\r\n\r\n    echo $this->renderDynamic(\'return Yii::$app->user->identity->name;\');\r\n\r\n    // ...在此生成内容...\r\n\r\n    $this->endCache();\r\n}\r\n```\r\nrenderDynamic() 方法接受 一段 PHP 代码作为参数。代码的返回值被看作是动态内容。这段代 码将在每次请求时都执行，无论其外层的片段缓存是否被存储。\r\n\r\n\r\n\r\n\r\n\r\n',0,0,0,0,0,1),
	(71,'页面缓存',4,'页面缓存指的是在服务器端缓存整个页面的内容。随后当同一个页面 被请求时，内容将从缓存中取出，而不是重新生成。\r\n\r\n页面缓存由 yii\\filters\\PageCache 类提供支持，该类是一个 过滤器。它可以像这样在控制器类中使用：\r\n```\r\npublic function behaviors()\r\n{\r\n    return [\r\n        [\r\n            \'class\' => \'yii\\filters\\PageCache\',\r\n            \'only\' => [\'index\'],\r\n            \'duration\' => 60,\r\n            \'variations\' => [\r\n                \\Yii::$app->language,\r\n            ],\r\n            \'dependency\' => [\r\n                \'class\' => \'yii\\caching\\DbDependency\',\r\n                \'sql\' => \'SELECT COUNT(*) FROM post\',\r\n            ],\r\n        ],\r\n    ];\r\n}\r\n```\r\n上述代码表示页面缓存只在 index 动作时启用，页面内容最多被缓存 60 秒，会随着当前应用的语言更改而变化。如果文章总数发生变化则缓 存的页面会失效。\r\n\r\n如你所见，页面缓存和片段缓存极其相似。它们都支持 duration，dependencies， variations 和 enabled 配置选项。它们的主要区别是页面缓存是由过滤器实现， 而片段缓存则是一个小部件。\r\n\r\n你可以在使用页面缓存的同时，使用片段缓存和 动态内容。\r\n',1,0,0,0,0,1),
	(72,'Url 帮助类',4,'### 获得通用 URL\r\n有两种获取通用 URLS 的方法 ：当前请求的 home URL 和 base URL 。 为了获取 home URL ，使用如下代码：\r\n```\r\n$relativeHomeUrl = Url::home();\r\n$absoluteHomeUrl = Url::home(true);\r\n$httpsAbsoluteHomeUrl = Url::home(\'https\');\r\n```\r\n如果没有传任何参数，这个方法将会生成相对 URL 。你可以传 true 来获得一个针对当前协议的绝对 URL； 或者，你可以明确的指定具体的协议类型（ https , http ）。\r\n\r\n如下代码可以获得当前请求的 base URL：\r\n```\r\n$relativeBaseUrl = Url::base(); \r\n$absoluteBaseUrl = Url::base(true); \r\n$httpsAbsoluteBaseUrl = Url::base(\'https\');\r\n```\r\n这个方法的调用方式和 `Url::home()` 的完全一样。\r\n## 创建 URLs <span id=\"creating-urls\"></span>\r\n为了创建一个给定路由的 URL 地址，请使用 `Url::toRoute()`方法。 这个方法使用 [[\\yii\\web\\UrlManager]] \r\n来创建一个 URL ：\r\n```\r\n$url = Url::toRoute([\'product/view\', \'id\' => 42]);\r\n```\r\n一个路由既可能是绝对的又可能是相对的。一个绝对的路由以前导斜杠开头（如： /site/index）， 而一个相对的路由则没有（比如： site/index 或者 index）。一个相对的路由将会按照如下规则转换为绝对路由：\r\n以下是该方法的一些例子：\r\n```\r\n// /index.php?r=site/index\r\necho Url::toRoute(\'site/index\');\r\n\r\n// /index.php?r=site/index&src=ref1#name\r\necho Url::toRoute([\'site/index\', \'src\' => \'ref1\', \'#\' => \'name\']);\r\n\r\n// /index.php?r=post/edit&id=100     assume the alias \"@postEdit\" is defined as \"post/edit\"\r\necho Url::toRoute([\'@postEdit\', \'id\' => 100]);\r\n\r\n// http://www.example.com/index.php?r=site/index\r\necho Url::toRoute(\'site/index\', true);\r\n\r\n// https://www.example.com/index.php?r=site/index\r\necho Url::toRoute(\'site/index\', \'https\');\r\n```\r\n还有另外一个方法 Url::to() 和 toRoute() 非常类似。这两个方法的唯一区别在于，前者要求一个路由必须用数组来指定。 如果传的参数为字符串，它将会被直接当做 URL 。\r\n\r\n以下是一些使用示例：\r\n```\r\n// /index.php?r=site/index\r\necho Url::to([\'site/index\']);\r\n\r\n// /index.php?r=site/index&src=ref1#name\r\necho Url::to([\'site/index\', \'src\' => \'ref1\', \'#\' => \'name\']);\r\n\r\n// /index.php?r=post/edit&id=100     assume the alias \"@postEdit\" is defined as \"post/edit\"\r\necho Url::to([\'@postEdit\', \'id\' => 100]);\r\n\r\n// the currently requested URL\r\necho Url::to();\r\n\r\n// /images/logo.gif\r\necho Url::to(\'@web/images/logo.gif\');\r\n\r\n// images/logo.gif\r\necho Url::to(\'images/logo.gif\');\r\n\r\n// http://www.example.com/images/logo.gif\r\necho Url::to(\'@web/images/logo.gif\', true);\r\n\r\n// https://www.example.com/images/logo.gif\r\necho Url::to(\'@web/images/logo.gif\', \'https\');\r\n```\r\n从2.0.3版本开始，你可以使用 yii\\helpers\\Url::current() 来创建一个基于当前请求路由和 GET 参数的 URL。 你可以通过传递一个 $params 给这个方法来添加或者删除 GET 参数。 例如：\r\n```\r\n// assume $_GET = [\'id\' => 123, \'src\' => \'google\'], current route is \"post/view\"\r\n\r\n// /index.php?r=post/view&id=123&src=google\r\necho Url::current();\r\n\r\n// /index.php?r=post/view&id=123\r\necho Url::current([\'src\' => null]);\r\n// /index.php?r=post/view&id=100&src=google\r\necho Url::current([\'id\' => 100]);\r\n```\r\n### 记住 URLs\r\n有时，你需要记住一个 URL 并在后续的请求处理中使用它。 你可以用以下方式达到这个目的：\r\n```\r\n// Remember current URL \r\nUrl::remember();\r\n\r\n// Remember URL specified. See Url::to() for argument format.\r\nUrl::remember([\'product/view\', \'id\' => 42]);\r\n\r\n// Remember URL specified with a name given\r\nUrl::remember([\'product/view\', \'id\' => 42], \'product\');\r\n\r\n```\r\n在后续的请求处理中，可以用如下方式获得记住的 URL：\r\n```\r\n$url = Url::previous();\r\n$productUrl = Url::previous(\'product\');\r\n\r\n```\r\n检查相对 URLs \r\n你可以用如下代码检测一个 URL 是否是相对的（比如，包含主机信息部分）。\r\n```\r\n$isRelative = Url::isRelative(\'test/it\');\r\n\r\n```\r\n',3,0,0,0,0,1),
	(73,'HTTP协议中几个状态码的含义',1,'### 1xx（临时响应）\r\n 表示临时响应并需要请求者继续执行操作的状态代码。  \r\n> 代码   说明   \r\n> 100   （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。    \r\n> 101   （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。\r\n\r\n### 2xx （成功） \r\n表示成功处理了请求的状态代码。  \r\n> 代码   说明   \r\n> 200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。   \r\n> 201   （已创建）  请求成功并且服务器创建了新的资源。   \r\n> 202   （已接受）  服务器已接受请求，但尚未处理。   \r\n> 203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。   \r\n> 204   （无内容）  服务器成功处理了请求，但没有返回任何内容。   \r\n> 205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。  \r\n> 206   （部分内容）  服务器成功处理了部分 GET 请求。   \r\n  \r\n### 3xx （重定向） \r\n表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。  \r\n> 代码   说明   \r\n> 300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。   \r\n> 301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。  \r\n> 302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。  \r\n> 303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。  \r\n> 304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。   \r\n> 305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。   \r\n> 307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。   \r\n  \r\n### 4xx（请求错误）   \r\n这些状态代码表示请求可能出错，妨碍了服务器的处理。  \r\n> 代码   说明   \r\n> 400   （错误请求） 服务器不理解请求的语法。   \r\n> 401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。   \r\n> 403   （禁止） 服务器拒绝请求。  \r\n> 404   （未找到） 服务器找不到请求的网页。  \r\n> 405   （方法禁用） 禁用请求中指定的方法。   \r\n> 406   （不接受） 无法使用请求的内容特性响应请求的网页。   \r\n> 407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。  \r\n> 408   （请求超时）  服务器等候请求时发生超时。   \r\n> 409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。   \r\n> 410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。   \r\n> 411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。   \r\n> 412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。   \r\n> 413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。   \r\n> 414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。   \r\n> 415   （不支持的媒体类型） 请求的格式不受请求页面的支持。   \r\n> 416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。   \r\n> 417   （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。   \r\n  \r\n### 5xx（服务器错误）  \r\n这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。  \r\n> 代码   说明   \r\n> 500   （服务器内部错误）  服务器遇到错误，无法完成请求。   \r\n> 501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。   \r\n> 502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。   \r\n> 503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。   \r\n> 504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。   \r\n> 505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。',2,0,0,0,0,1),
	(82,'php魔术方法',1,'php规定以两个下划线（__）开头的方法都保留为魔术方法，所以建议大家函数名最好不用__开头，除非是为了重载已有的魔术方法。  \r\n> PHP中的魔术方法有 :__construct, __destruct , __call, __callStatic,__get, __set, __isset, __unset , __sleep, __wakeup, __toString, __set_state, __clone, __autoload\r\n\r\n### 1、__get、__set  \r\n\r\n这两个方法是为在类和他们的父类中没有声明的属性而设计的  \r\n__get( $property ) 当调用一个未定义的属性时，此方法会被触发，传递的参数是被访问的属性名  \r\n__set( $property, $value ) 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值  \r\n这里的没有声明包括当使用对象调用时，访问控制为proteced,private的属性（即没有权限访问的属性）。  \r\n### 2、__isset、__unset  \r\n\r\n__isset( $property ) 当在一个未定义的属性上调用isset()函数时调用此方法  \r\n__unset( $property ) 当在一个未定义的属性上调用unset()函数时调用此方法  \r\n与__get方法和__set方法相同，这里的没有声明包括当使用对象调用时，访问控制为proteced,private的属性（即没有权限访问的属性）  \r\n### 3、__call  \r\n\r\n__call( $method, $arg_array ) 当调用一个未定义的方法是调用此方法  \r\n这里的未定义的方法包括没有权限访问的方法；如果方法不存在就去父类中找这个方法，如果父类中也不存在就去调用本类的__call()方​法，如果本类中不存在__call()方法就去找父类中的__call()方法  \r\n  \r\n### 4、__autoload\r\n  \r\n__autoload 函数，它会在试图使用尚未被定义的类时自动调用。通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。  \r\n如果要定义一个全局的自动加载类，则必须用spl_autoload_register()方法将处理类注册到PHP标准库：  \r\nview plaincopy to clipboardprint?  \r\n<?php    \r\nclass Loader    \r\n{    \r\nstatic function autoload_class($class_name)    \r\n{    \r\n//寻找正确的$class_name类，并引入，没有则抛出异常    \r\n}    \r\n}    \r\n    \r\n/** \r\n*   设置对象的自动载入 \r\n*   spl_autoload_register — Register given function as __autoload() implementation \r\n*/    \r\nspl_autoload_register(array(\'Loader\', \'autoload_class\'));    \r\n    \r\n$a = new Test();//Test没用require就实例化，实现自动加载，很多框架就用这种方法自动加载类    \r\n    \r\n?>    \r\n注意: 在 __autoload 函数中抛出的异常不能被 catch 语句块捕获并导致致命错误，所以应该在函数本身做捕获。  \r\n### 5、__construct、__destruct\r\n  \r\n__construct 构造方法，当一个对象创建时调用此方法，相对于PHP4使用此方法的好处是：可以使构造方法有一个独一无二的名称,无论它所在的类的名称是什么.这样你在改变类的名称时,就不需要改变构造方法的名称  \r\n__destruct 析构方法，PHP将在对象被销毁前（即从内存中清除前）调用这个方法。默认情况下,PHP仅仅释放对象属性所占用的内存并销毁对象相关的资源，析构函数允许你在使用一个对象之后执行任意代码来清除内存。当PHP决定你的脚本不再与对象相关时,析构函数将被调用。  \r\n在一个函数的命名空间内，这会发生在函数return的时候。  \r\n对于全局变量,这发生于脚本结束的时候。  \r\n如果你想明确地销毁一个对象,你可以给指向该对象的变量分配任何其它值.通常将变量赋值勤为NULL或者调用unset.  \r\n### 6、__clone  \r\n\r\nPHP5中的对象赋值是使用的引用赋值，如果想复制一个对象则需要使用clone方法，在调用此方法是对象会自动调用__clone魔术方法，如果在对象复制需要执行某些初始化操作，可以在__clone方法实现。  \r\n### 7、__toString \r\n \r\n__toString方法在将一个对象转化成字符串时自动调用，比如使用echo打印对象时。  \r\n如果类没有实现此方法，则无法通过echo打印对象，否则会显示：Catchable fatal error: Object of class test could not be converted to string in  \r\n此方法必须返回一个字符串。  \r\n在PHP 5.2.0之前，__toString方法只有结合使用echo() 或 print()时 才能生效。PHP 5.2.0之后，则可以在任何字符串环境生效（例如通过printf()，使用%s修饰符），但 不能用于非字符串环境（如使用%d修饰符）。从PHP 5.2.0，如果将一个未定义__toString方法的对象 转换为字符串，会报出一个E_RECOVERABLE_ERROR错误。  \r\n### 8、__sleep、__wakeup \r\n \r\n__sleep 串行化的时候用  \r\n__wakeup 反串行化的时候调用  \r\nserialize() 检查类中是否有魔术名称 __sleep 的函数。如果这样，该函数将在任何序列化之前运行。它可以清除对象并应该返回一个包含有该对象中应被序列化的所有变量名的数组。  \r\n使用 __sleep 的目的是关闭对象可能具有的任何数据库连接，提交等待中的数据或进行类似的清除任务。此外，如果有非常大的对象而并不需要完全储存下来时此函数也很有用。  \r\n相反地，unserialize() 检查具有魔术名称 __wakeup 的函数的存在。如果存在，此函数可以重建对象可能具有的任何资源。  \r\n使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。  \r\n### 9、__set_state \r\n \r\n当调用var_export()时，这个静态 方法会被调用（自PHP 5.1.0起有效）。  \r\n本方法的唯一参数是一个数组，其中包含按array(’property’ => value, …)格式排列的类属性。  \r\n### 10、__invoke\r\n  \r\n当尝试以调用函数的方式调用一个对象时，__invoke 方法会被自动调用。  \r\nPHP5.3.0以上版本有效  \r\n### 11、__callStatic \r\n \r\n它的工作方式类似于 __call() 魔术方法，__callStatic() 是为了处理静态方法调用，  \r\nPHP5.3.0以上版本有效  \r\nPHP 确实加强了对 __callStatic() 方法的定义；它必须是公共的，并且必须被声明为静态的。同样，__call() 魔术方法必须被定义为公共的，所有其他魔术方法都必须如此  ',1,0,0,0,0,1),
	(83,'编译php时的configure 参数  ',1,'```\r\n./configure  \r\n–prefix=/usr/local/php                      php 安装目录  \r\n–with-apxs2=/usr/local/apache/bin/apxs  \r\n–with-config-file-path=/usr/local/php/etc      指定php.ini位置  \r\n–with-mysql=/usr/local/mysql           mysql安装目录，对mysql的支持  \r\n–with-mysqli=/usr/local/mysql/bin/mysql_config    mysqli文件目录,优化支持  \r\n–enable-safe-mode                              打开安全模式  \r\n–enable-ftp                                 打开ftp的支持  \r\n–enable-zip                                 打开对zip的支持  \r\n–with-bz2                    打开对bz2文件的支持  \r\n–with-jpeg-dir                                 打开对jpeg图片的支持  \r\n–with-png-dir                                 打开对png图片的支持  \r\n–with-freetype-dir              打开对freetype字体库的支持  \r\n–without-iconv                关闭iconv函数，种字符集间的转换  \r\n–with-libxml-dir                 打开libxml2库的支持  \r\n–with-xmlrpc              打开xml-rpc的c语言  \r\n–with-zlib-dir                                 打开zlib库的支持  \r\n–with-gd                                    打开gd库的支持  \r\n–enable-gd-native-ttf               支持TrueType字符串函数库  \r\n–with-curl                      打开curl浏览工具的支持  \r\n–with-curlwrappers                 运用curl工具打开url流  \r\n–with-ttf                      打开freetype1.*的支持，可以不加了  \r\n–with-xsl            打开XSLT 文件支持，扩展了libxml2库 ，需要libxslt软件  \r\n–with-gettext                      打开gnu 的gettext 支持，编码库用到  \r\n–with-pear            打开pear命令的支持，php扩展用的  \r\n–enable-calendar             打开日历扩展功能  \r\n–enable-mbstring                  多字节，字符串的支持  \r\n–enable-bcmath                  打开图片大小调整,用到zabbix监控的时候用到了这个模块  \r\n–enable-sockets                  打开 sockets 支持  \r\n–enable-exif                      图片的元数据支持  \r\n–enable-magic-quotes               魔术引用的支持  \r\n–disable-rpath                     关闭额外的运行库文件  \r\n–disable-debug                  关闭调试模式  \r\n–with-mime-magic=/usr/share/file/magic.mime      魔术头文件位置  \r\ncgi方式安装才用的参数  \r\n–enable-fpm                     打上php-fpm 补丁后才有这个参数，cgi方式安装的启动程序  \r\n–enable-fastcgi                  支持fastcgi方式启动php  \r\n–enable-force-cgi-redirect             同上 ,帮助里没有解释  \r\n–with-ncurses                     支持ncurses 屏幕绘制以及基于文本终端的图形互动功能的动态库  \r\n–enable-pcntl           freeTDS需要用到的，可能是链接mssql 才用到  \r\nmhash和mcrypt算法的扩展  \r\n–with-mcrypt                     算法  \r\n–with-mhash                     算法  \r\n–with-gmp  \r\n–enable-inline-optimization  \r\n–with-openssl           openssl的支持，加密传输时用到的  \r\n–enable-dbase  \r\n–with-pcre-dir=/usr/local/bin/pcre-config    perl的正则库案安装位置  \r\n–disable-dmalloc  \r\n–with-gdbm                    dba的gdbm支持  \r\n–enable-sigchild  \r\n–enable-sysvsem  \r\n–enable-sysvshm  \r\n–enable-zend-multibyte              支持zend的多字节  \r\n–enable-mbregex  \r\n–enable-wddx  \r\n–enable-shmop  \r\n–enable-soap  \r\nPHP配置选项完整列表  \r\n数据库选项  \r\n–with-dbplus  \r\n包括 dbplus 的支持。  \r\n–with-adabas[=DIR]  \r\n包括 Adabas D 的支持。DIR 是 Adabas 的基本安装目录，默认为 /usr/local。  \r\n–with-sapdb[=DIR]  \r\n包括 SAP DB 的支持。DIR 是 SAP DB 的基本安装目录，默认为 /usr/local。  \r\n–with-solid[=DIR]  \r\n包括 Solid 的支持。DIR 是 Solid 的基本安装目录，默认为 /usr/local/solid。  \r\n–with-ibm-db2[=DIR]  \r\n包括 IBM DB2 的支持。DIR 是 DB2 的基本安装目录，默认为 /home/db2inst1/sqllib。  \r\n–with-empress[=DIR]  \r\n包括 Empress 的支持。DIR 是 Empress 的基本安装目录，默认为 $EMPRESSPATH。自 PHP4 起，本选项仅支持 Empress 8.60 及以上版本。  \r\n–with-empress-bcs[=DIR]  \r\n包括 Empress Local Access 的支持。DIR 是 Empress 的基本安装目录，默认为 $EMPRESSPATH。自 PHP4 起，本选项仅支持 Empress 8.60 及以上版本。  \r\n–with-birdstep[=DIR]  \r\n包括 Birdstep 的支持。DIR 是 Birdstep 的基本安装目录，默认为 /usr/local/birdstep。  \r\n–with-custom-odbc[=DIR]  \r\n包 括用户自定义 ODBC 的支持。DIR 是 ODBC 的基本安装目录，默认为 /usr/local。要确认定义了 CUSTOM_ODBC_LIBS 并且在 include 目录中有某个 odbc.h。例如，对于 QNX 下的 Sybase SQL Anywhere 5.5.00，在运行 configure 脚本之前应该先定义以下环境变量： CPPFLAGS=”-DODBC_QNX -DSQLANY_BUG” LDFLAGS=-lunix CUSTOM_ODBC_LIBS=”-ldblib -lodbc”.  \r\n–with-iodbc[=DIR]  \r\n包括 iODBC 的支持。DIR 是 iODBC 的基本安装目录，默认为 /usr/local。  \r\n–with-esoob[=DIR]  \r\n包括 Easysoft OOB 的支持。DIR 是 OOB 的基本安装目录，默认为 /usr/local/easysoft/oob/client。  \r\n–with-unixODBC[=DIR]  \r\n包括 unixODBC 的支持。DIR 是 unixODBC 的基本安装目录，默认为 /usr/local。  \r\n–with-openlink[=DIR]  \r\n包括 OpenLink ODBC 的支持。DIR 是 OpenLink 的基本安装目录，默认为 /usr/local。这和 iODBC 一样。  \r\n–with-dbmaker[=DIR]  \r\n包括 DBMaker 的支持。DIR 是 DBMaker 的基本安装目录，默认为最新版 DBMaker 安装的目录（例如 /home/dbmaker/3.6）。  \r\n–disable-unified-odbc  \r\n取消对 unified ODBC 的支持。仅适用于激活了 iODBC，Adabas，Solid，Velocis 或用户自定义 ODBC 界面。仅能用于 PHP 3！  \r\n图像选项  \r\n–without-gd  \r\n禁用 GD 支持。仅用于 PHP 3！  \r\n–with-imagick  \r\nImagick 扩展被移到 PEAR 中的 PECL 中去了，可以在这里找到。PHP 4 中的安装指示可以在 PEAR 站点中找到。  \r\n只用 –with-imagick 仅在 PHP 3 中支持，除非依照 PEAR 站点的指示去做。  \r\n–with-ming[=DIR]  \r\n包括 ming 支持。  \r\n杂类选项  \r\n–enable-force-cgi-redirect  \r\n激活服务器内部重定向的安全检查。如果是在 Apache 中以 CGI 方式使用 PHP 则应该使用此选项。  \r\n–enable-discard-path  \r\n使用此选项可以使 PHP 的 CGI 可执行程序安全地放置在 web 目录树以外的地方，并且别人也不能绕过 .htaccess 的安全设置。  \r\n–with-fastcgi  \r\n将 PHP 编译成 FastCGI 应用程序。  \r\n–enable-debug  \r\n编译时加入调试符号。  \r\n–with-layout=TYPE  \r\n设置安装后的文件布局。TYPE 可以是 PHP（默认值）或者 GNU。  \r\n–with-pear=DIR  \r\n将 PEAR 安装在 DIR 目录中（默认为 PREFIX/lib/php）。  \r\n–without-pear  \r\n不安装 PEAR。  \r\n–enable-sigchild  \r\n激活 PHP 自己的 SIGCHLD 句柄。  \r\n–disable-rpath  \r\n禁止传递附加的运行时库搜索路径。  \r\n–enable-libgcc  \r\n激活显式 libgcc 连接。  \r\n–enable-php-streams  \r\n包含试验的 PHP 流。除非是测试源代码，否则不要使用！  \r\n–with-zlib-dir=<DIR>;  \r\n定义 zlib 的安装路径。  \r\n–with-aspell[=DIR]  \r\n包含 ASPELL 支持。  \r\n–with-ccvs[=DIR]  \r\n包含 CCVS 支持。  \r\n–with-cybercash[=DIR]  \r\n包含 CyberCash 支持。DIR 是 CyberCash MCK 的安装目录。  \r\n–with-icap[=DIR]  \r\n包含 ICAP 支持。  \r\n–with-ircg-config  \r\nircg-config 脚本的路径。  \r\n–with-ircg  \r\n包含 ircg 支持。  \r\n–enable-mailparse  \r\n包含 mailparse 支持。  \r\n–with-muscat[=DIR]  \r\n包含 muscat 支持。  \r\n–with-satellite[=DIR]  \r\n激活通过 Satellite（试验性质）的 CORBA 支持。DIR 是 ORBit 的主目录。  \r\n–enable-trans-sid  \r\n激活透明的 session id 传播。  \r\n–with-regex[=TYPE]  \r\n使用系统 regex 库（不赞成）。  \r\n–with-vpopmail[=DIR]  \r\n包含 vpopmail 支持。  \r\n–with-tsrm-pthreads  \r\n使用 POSIX 线程（默认值）。  \r\n–enable-shared[=PKGS]  \r\n编译共享库 [default=yes]。  \r\n–enable-static[=PKGS]  \r\n编译静态库 [default=yes]。  \r\n–enable-fast-install[=PKGS]  \r\n为快速安装而优化 [default=yes]。  \r\n–with-gnu-ld  \r\n假定 C 编译器使用 GNU ld [default=no]。  \r\n–disable-libtool-lock  \r\n避免锁死（可能会破坏并行编译）。  \r\n–with-pic  \r\n尝试只使用 PIC/non-PIC 对象 [default=use both]。  \r\n–enable-memory-limit  \r\n编译时加入内存限制支持。  \r\n–disable-url-fopen-wrapper  \r\n禁止通过 URL 的 fopen wrapper，不能通过 HTTP 或 FTP 访问文件。  \r\n–enable-versioning  \r\n仅输出所需要的符号。更多信息见 INSTALL 文件。  \r\n–with-imsp[=DIR]  \r\n包含 IMSp 支持（DIR 是 IMSP 的 include 目录和 libimsp.a 目录）。仅用于 PHP 3！  \r\n–with-mck[=DIR]  \r\n包含 Cybercash MCK 支持。DIR 是 cybercash mck 编译目录，默认为 /usr/src/mck-3.2.0.3-linux。帮助见 extra/cyberlib。仅用于 PHP 3！  \r\n–with-mod-dav=DIR  \r\n包含通过 Apache 的 mod_dav 的 DAV 支持。DIR 是 mod_dav 的安装目录（仅用于 Apache 模块版本！）仅用于 PHP 3！  \r\n–enable-debugger  \r\n编译入远程调试函数。仅用于 PHP 3！  \r\n–enable-versioning  \r\n利用 Solaris 2.x 和 Linux 提供的版本控制与作用范围的优势。仅用于 PHP 3！  \r\nPHP 选项  \r\n–enable-maintainer-mode  \r\n激活将编译规则和未使用的（以及一些混淆的）依赖文件放入临时安装中。  \r\n–with-config-file-path=PATH  \r\n设定 php.ini 所在的路径，默认为 PREFIX/lib。  \r\n–enable-safe-mode  \r\n默认激活安全模式。  \r\n–with-exec-dir[=DIR]  \r\n安全模式下只允许此目录下执行程序。默认为 /usr/local/php/bin。  \r\n–enable-magic-quotes  \r\n默认激活 magic quotes。  \r\n–disable-short-tags  \r\n默认禁止简写的 PHP 开始标记 <?。  \r\n服务器选项  \r\n–with-aolserver=DIR  \r\n指定已安装的 AOLserver 的路径。  \r\n–with-apxs[=FILE]  \r\n编译共享 Apache 模块。FILE 是可选的 Apache 的 apxs 工具的路径，默认为 apxs。确保指定的 apxs 版本是安装后的文件而不是 Apache 源程序中包中的。  \r\n–with-apache[=DIR]  \r\n编译 Apache 模块。DIR 是 Apache 源程序的最高一级目录。默认为 /usr/local/apache。  \r\n–with-mod_charset  \r\n激活 mod_charset 中的传递表（Apache 中）。  \r\n–with-apxs2[=FILE]  \r\n编译共享的 Apache 2.0 模块。FILE 是可选的 Apache 的 apxs 工具的路径，默认为 apxs。  \r\n–with-fhttpd[=DIR]  \r\n编译 fhttpd 模块。DIR 是 fhttpd 的源代码路径，默认为 /usr/local/src/fhttpd。  \r\n–with-isapi=DIR  \r\n将 PHP 编译为 ISAPI 模块用于 Zeus。  \r\n–with-nsapi=DIR  \r\n指定已安装的 Netscape 服务器路径。  \r\n–with-phttpd=DIR  \r\n暂无信息。  \r\n–with-pi3web=DIR  \r\n将 PHP 编译为用于 Pi3Web 的模块。  \r\n–with-roxen=DIR  \r\n将 PHP 编译为一个 Pike 模块。DIR 是 Roxen 的根目录，通常为 /usr/local/roxen/server。  \r\n–enable-roxen-zts  \r\n编译 Roxen 模块，使用 Zend Thread Safety。  \r\n–with-servlet[=DIR]  \r\n包含 servlet 支持。DIR 是 JSDK 的基本安装目录。本 SAPI 需要 java 扩展必须被编译为共享的 dl。  \r\n–with-thttpd=SRCDIR  \r\n将 PHP 编译为 thttpd 模块。  \r\n–with-tux=MODULEDIR  \r\n```',1,0,0,0,0,1),
	(84,'crontab 定时任务',5,'下面是crontab的格式：  \r\n```\r\nminute hour day month dayofweek command  (分 时 日 月 星期 要运行的命令)\r\nminute - 从0到59的整数\r\nhour - 从0到23的整数（0表示子夜）\r\nday - 从1到31的整数 (必须是指定月份的有效日期)\r\nmonth - 从1到12的整数 (或如Jan或Feb简写的月份)\r\ndayofweek - 从0到7的整数，0或7用来描述周日 (或用Sun或Mon简写来表示,0表示星期天)\r\ncommand - 需要执行的命令(可用as ls /proc >> /tmp/proc或 执行自定义脚本的命令) \r\n```\r\n\r\ncron服务提供crontab命令来设定cron服务的，以下是这个命令的一些参数与说明：\r\n```\r\ncrontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数\r\ncrontab -l //列出某个用户cron服务的详细内容\r\ncrontab -r //删除没个用户的cron服务\r\ncrontab -e //编辑某个用户的cron服务 \r\n```\r\n\r\n> 除了数字还有几个个特殊的符号就是\"*\"、\"/\"和\"-\"、\",\"，*代表所有的取值范围内的数字，\"/\"代表每的意思,\"*/5\"表示每5个单位，\"-\"代表从某个数字到某个数字,\",\"分开几个离散的数字。\r\n\r\n### 编辑/etc/crontab 文件配置cron\r\ncron服务每分钟不仅要读一次/var/spool/cron内的所有文件，还需要读一次/etc/crontab，因此我们配置这个文件也能运用cron服务做一些事情。用crontab配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务。此文件的文件格式是：\r\n```\r\nSHELL=/bin/bash\r\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\r\nMAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号\r\nHOME=/      //使用者运行的路径,这里是根目录\r\n# run-parts\r\n01 * * * * root run-parts /etc/cron.hourly //每小时执行/etc/cron.hourly内的脚本\r\n02 4 * * * root run-parts /etc/cron.daily //每天执行/etc/cron.daily内的脚本\r\n22 4 * * 0 root run-parts /etc/cron.weekly //每星期执行/etc/cron.weekly内的脚本\r\n42 4 1 * * root run-parts /etc/cron.monthly //每月去执行/etc/cron.monthly内的脚本\r\n\r\n大家注意\"run-parts\"这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名了。\r\n```\r\n\r\n这里有crontab文件条目的一些例子：\r\n\r\n> 30 21 * * * /usr/local/apache/bin/apachectl restart\r\n> 上面的例子表示每晚的21:30重启apache。\r\n\r\n> 45 4 1,10,22 * * /usr/local/apache/bin/apachectl restart\r\n> 上面的例子表示每月1、10、22日的4 : 45重启apache。\r\n\r\n> 10 1 * * 6,0 /usr/local/apache/bin/apachectl restart\r\n> 上面的例子表示每周六、周日的1 : 10重启apache。\r\n\r\n> 0,30 18-23 * * * /usr/local/apache/bin/apachectl restart\r\n> 上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。\r\n\r\n> 0 23 * * 6 /usr/local/apache/bin/apachectl restart\r\n> 上面的例子表示每星期六的11 : 00 pm重启apache。\r\n\r\n> 0 */1 * * * /usr/local/apache/bin/apachectl restart\r\n> 每一小时重启apache\r\n\r\n> 0 23-7/1 * * * /usr/local/apache/bin/apachectl restart\r\n> 晚上11点到早上7点之间，每隔一小时重启apache\r\n\r\n> 0 11 4 * mon-wed /usr/local/apache/bin/apachectl restart\r\n> 每月的4号与每周一到周三的11点重启apache\r\n\r\n> 0 4 1 jan * /usr/local/apache/bin/apachectl restart\r\n> 一月一号的4点重启apache',3,0,0,0,0,1);

/*!40000 ALTER TABLE `blog_article` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table blog_blogroll
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_blogroll`;

CREATE TABLE `blog_blogroll` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `title` varchar(80) NOT NULL DEFAULT '' COMMENT '标题',
  `link` varchar(80) NOT NULL DEFAULT '' COMMENT '链接',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态(1-显示，2-不显示)',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '添加时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='友情链接表';

LOCK TABLES `blog_blogroll` WRITE;
/*!40000 ALTER TABLE `blog_blogroll` DISABLE KEYS */;

INSERT INTO `blog_blogroll` (`id`, `title`, `link`, `status`, `created_at`)
VALUES
	(1,'Yii Framework 中文社区','http://www.yiichina.com/',1,1494490235),
	(2,'Bootstrap','http://v3.bootcss.com/',1,1494490235),
	(3,'Layui 前端框架','https://www.layui.com/',1,1494490235),
	(4,'FontAwesome 图标样式CSS','http://www.yeahzan.com/fa/facss.html',1,1494490235);

/*!40000 ALTER TABLE `blog_blogroll` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table blog_category
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_category`;

CREATE TABLE `blog_category` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `pid` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '类别',
  `name` varchar(32) NOT NULL DEFAULT '' COMMENT '名称',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章分类表';



# Dump of table blog_collect
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_collect`;

CREATE TABLE `blog_collect` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `pid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '收藏ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='收藏表';



# Dump of table blog_comment
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_comment`;

CREATE TABLE `blog_comment` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `pid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '评论ID',
  `content` varchar(255) NOT NULL DEFAULT '' COMMENT '内容',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='评论表';



# Dump of table blog_leave_word
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_leave_word`;

CREATE TABLE `blog_leave_word` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `user_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '用户ID',
  `content` varchar(255) NOT NULL DEFAULT '' COMMENT '内容',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='留言表';



# Dump of table blog_music
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_music`;

CREATE TABLE `blog_music` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='音乐表';



# Dump of table blog_talk
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_talk`;

CREATE TABLE `blog_talk` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `content` varchar(255) NOT NULL DEFAULT '' COMMENT '内容',
  `browse_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '浏览次数',
  `comment_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '评论次数',
  `praise_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '赞次数',
  `tread_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '踩次数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='说说表';

LOCK TABLES `blog_talk` WRITE;
/*!40000 ALTER TABLE `blog_talk` DISABLE KEYS */;

INSERT INTO `blog_talk` (`id`, `content`, `browse_num`, `comment_num`, `praise_num`, `tread_num`)
VALUES
	(2,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(6,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(7,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(11,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(15,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(16,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(18,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(19,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(20,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(21,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(22,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(25,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(27,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(29,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(30,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(31,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(32,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(34,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(36,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(38,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(39,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(40,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(43,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(44,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(46,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(49,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(50,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(51,'我就是测试一下说说,今天说了什么',0,0,0,0),
	(54,'我就是测试一下说说,今天说了什么',0,0,0,0);

/*!40000 ALTER TABLE `blog_talk` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table blog_user
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_user`;

CREATE TABLE `blog_user` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `username` varchar(32) NOT NULL DEFAULT '' COMMENT '用户名',
  `password` char(32) NOT NULL DEFAULT '' COMMENT '密码',
  `nickname` varchar(10) NOT NULL DEFAULT '' COMMENT '昵称',
  `avatar` varchar(100) NOT NULL DEFAULT '' COMMENT '头像',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '状态（1-正常，2-冻结）',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `blog_user` WRITE;
/*!40000 ALTER TABLE `blog_user` DISABLE KEYS */;

INSERT INTO `blog_user` (`id`, `username`, `password`, `nickname`, `avatar`, `status`, `created_at`)
VALUES
	(1,'13141234657@163.com','e10adc3949ba59abbe56e057f20f883e','小马哥','/images/a4.jpg',1,1491791475),
	(2,'273327242@qq.com','e10adc3949ba59abbe56e057f20f883e','小亮','/images/a7.jpg',1,1491791475);

/*!40000 ALTER TABLE `blog_user` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table blog_user_attach
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_user_attach`;

CREATE TABLE `blog_user_attach` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `article_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '文章数',
  `visitor_num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '访客数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户附加表';



# Dump of table blog_user_dynamic
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_user_dynamic`;

CREATE TABLE `blog_user_dynamic` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `category` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '类型',
  `user_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '用户ID',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `blog_user_dynamic` WRITE;
/*!40000 ALTER TABLE `blog_user_dynamic` DISABLE KEYS */;

INSERT INTO `blog_user_dynamic` (`id`, `category`, `user_id`, `created_at`)
VALUES
	(1,1,1,1495078642),
	(2,3,1,1495078644),
	(3,1,1,1495078644),
	(4,1,1,1495078645),
	(5,1,2,1495078645),
	(6,3,1,1495078645),
	(7,3,1,1495078645),
	(8,1,2,1495078645),
	(9,1,1,1495078645),
	(10,1,1,1495078645),
	(11,3,1,1495078646),
	(12,1,2,1495078646),
	(13,1,2,1495078646),
	(14,1,1,1495078646),
	(15,3,2,1495078646),
	(16,3,2,1495078646),
	(17,1,2,1495078646),
	(18,3,2,1495078647),
	(19,3,2,1495078647),
	(20,3,1,1495078653),
	(21,3,1,1495078654),
	(22,3,1,1495078654),
	(23,1,2,1495078654),
	(24,1,1,1495078654),
	(25,3,2,1495078654),
	(26,1,2,1495078655),
	(27,3,2,1495078655),
	(28,1,2,1495078655),
	(29,3,1,1495078655),
	(30,3,1,1495078655),
	(31,3,1,1495078655),
	(32,3,2,1495078655),
	(33,1,1,1495078656),
	(34,3,2,1495078656),
	(35,1,2,1495078656),
	(36,3,2,1495078656),
	(37,1,1,1495078656),
	(38,3,1,1495078656),
	(39,3,2,1495078656),
	(40,3,2,1495078657),
	(41,1,2,1495078657),
	(42,1,1,1495078657),
	(43,3,2,1495078657),
	(44,3,1,1495078657),
	(45,1,2,1495078657),
	(46,3,1,1495078664),
	(47,1,1,1495078664),
	(48,1,2,1495078665),
	(49,3,1,1495078665),
	(50,3,2,1495078665),
	(51,3,2,1495078665),
	(52,1,1,1495078665),
	(53,1,1,1495078665),
	(54,3,1,1495078666),
	(55,1,2,1495078666),
	(56,1,2,1495078666),
	(57,1,2,1495078666),
	(58,1,1,1495419757),
	(59,1,1,1495434426),
	(60,1,1,1495434749),
	(61,1,1,1495435301),
	(62,1,1,1495436094),
	(63,1,1,1495440547),
	(64,1,1,1495441188),
	(65,1,1,1495502997),
	(66,1,1,1495502951),
	(67,1,1,1495443227),
	(68,1,1,1495443623),
	(69,1,1,1495502782),
	(70,1,1,1495444676),
	(71,1,1,1495444780),
	(72,1,1,1495446266),
	(73,1,1,1495596438),
	(82,1,1,1495596872),
	(83,1,1,1495596987),
	(84,1,1,1495605963);

/*!40000 ALTER TABLE `blog_user_dynamic` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table blog_viedo
# ------------------------------------------------------------

DROP TABLE IF EXISTS `blog_viedo`;

CREATE TABLE `blog_viedo` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='视频表';



# Dump of table md_admin
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_admin`;

CREATE TABLE `md_admin` (
  `id` tinyint(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `username` varchar(20) NOT NULL DEFAULT '' COMMENT '账号',
  `password` char(32) NOT NULL COMMENT '密码',
  `nickname` varchar(20) NOT NULL DEFAULT '' COMMENT '姓名',
  `avatar` varchar(100) NOT NULL DEFAULT '' COMMENT '头像',
  `mobile` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '手机号',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态（1启用 2禁用）',
  `last_ip` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '上一次登录IP',
  `last_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '上一次登录时间',
  `created_id` tinyint(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建人',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNIQUE_USERNAME` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='管理员表';

LOCK TABLES `md_admin` WRITE;
/*!40000 ALTER TABLE `md_admin` DISABLE KEYS */;

INSERT INTO `md_admin` (`id`, `username`, `password`, `nickname`, `avatar`, `mobile`, `status`, `last_ip`, `last_time`, `created_id`, `created_at`)
VALUES
	(1,'admin','e10adc3949ba59abbe56e057f20f883e','超管','http://admin.maliang.net.cn//img/profile_small.jpg',13666666666,1,2130706433,1499234974,1,1491791475),
	(4,'maliang','e10adc3949ba59abbe56e057f20f883e','马亮','',13141234768,1,0,0,1,1494493023);

/*!40000 ALTER TABLE `md_admin` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table md_api
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_api`;

CREATE TABLE `md_api` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT '接口名称',
  `module` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '接口模块',
  `url` varchar(100) NOT NULL DEFAULT '' COMMENT '初始URL',
  `request_method` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '请求方式',
  `coding` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '编码',
  `result` text NOT NULL COMMENT '返回结果',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='接口表';



# Dump of table md_api_params
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_api_params`;

CREATE TABLE `md_api_params` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `key` varchar(32) NOT NULL DEFAULT '' COMMENT '键名',
  `value` varchar(32) NOT NULL DEFAULT '' COMMENT '值',
  `explain` varchar(32) NOT NULL DEFAULT '' COMMENT '说明',
  `pid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '接口ID',
  `category` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '类别',
  `type` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '类型',
  `required` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '必填',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='接口参数表';



# Dump of table md_auth_assignment
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_auth_assignment`;

CREATE TABLE `md_auth_assignment` (
  `item_name` varchar(64) NOT NULL DEFAULT '' COMMENT '角色',
  `user_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '管理员ID',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`item_name`,`user_id`),
  CONSTRAINT `md_auth_assignment_ibfk_1` FOREIGN KEY (`item_name`) REFERENCES `md_auth_item` (`name`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='管理员、角色的关联表';

LOCK TABLES `md_auth_assignment` WRITE;
/*!40000 ALTER TABLE `md_auth_assignment` DISABLE KEYS */;

INSERT INTO `md_auth_assignment` (`item_name`, `user_id`, `created_at`)
VALUES
	('普通组',4,1494493023),
	('超管',1,1491791475);

/*!40000 ALTER TABLE `md_auth_assignment` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table md_auth_item
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_auth_item`;

CREATE TABLE `md_auth_item` (
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT '角色/权限',
  `type` smallint(6) unsigned NOT NULL DEFAULT '0' COMMENT '类型（1角色 2权限）',
  `description` varchar(40) NOT NULL DEFAULT '' COMMENT '描述',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`name`),
  KEY `type` (`type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='角色、权限表';

LOCK TABLES `md_auth_item` WRITE;
/*!40000 ALTER TABLE `md_auth_item` DISABLE KEYS */;

INSERT INTO `md_auth_item` (`name`, `type`, `description`, `created_at`)
VALUES
	('admin',2,'后台管理',1494403964),
	('admin/add',2,'新增',1494409944),
	('admin/auth',2,'授权',1494478577),
	('admin/delete',2,'删除',1494478521),
	('admin/edit',2,'编辑',1494478506),
	('admin/list',2,'用户管理',1494404030),
	('article/list',2,'文章管理',1494548826),
	('blog',2,'博客管理',1494548740),
	('cate/list',2,'分类管理',1494553902),
	('menu/add',2,'新增',1494482037),
	('menu/delete',2,'删除',1494482061),
	('menu/edit',2,'编辑',1494482048),
	('menu/list',2,'菜单管理',1494404401),
	('menu/sort',2,'菜单排序',1494482075),
	('music/list',2,'音乐管理',1494548905),
	('operate/list',2,'日志管理',1494404430),
	('permission/add',2,'新增',1494481959),
	('permission/delete',2,'删除',1494481988),
	('permission/edit',2,'编辑',1494481973),
	('permission/list',2,'权限管理',1494404391),
	('picture/list',2,'图片管理',1494548878),
	('role/add',2,'新增',1494481685),
	('role/delete',2,'删除',1494481711),
	('role/edit',2,'编辑',1494481698),
	('role/list',2,'角色管理',1494404363),
	('task/add',2,'新增',1494482104),
	('task/delete',2,'删除',1494482128),
	('task/edit',2,'编辑',1494482114),
	('task/list',2,'任务管理',1494404421),
	('user/list',2,'用户管理',1494548961),
	('video/list',2,'视频管理',1494548936),
	('普通组',1,'只有普通功能',1494399415),
	('超管',1,'超级管理员',1494399324);

/*!40000 ALTER TABLE `md_auth_item` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table md_auth_item_child
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_auth_item_child`;

CREATE TABLE `md_auth_item_child` (
  `parent` varchar(64) NOT NULL DEFAULT '' COMMENT '角色',
  `child` varchar(64) NOT NULL DEFAULT '' COMMENT '权限',
  PRIMARY KEY (`parent`,`child`),
  KEY `child` (`child`),
  CONSTRAINT `md_auth_item_child_ibfk_1` FOREIGN KEY (`parent`) REFERENCES `md_auth_item` (`name`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `md_auth_item_child_ibfk_2` FOREIGN KEY (`child`) REFERENCES `md_auth_item` (`name`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='角色、权限的关联表';

LOCK TABLES `md_auth_item_child` WRITE;
/*!40000 ALTER TABLE `md_auth_item_child` DISABLE KEYS */;

INSERT INTO `md_auth_item_child` (`parent`, `child`)
VALUES
	('admin/list','admin/add'),
	('admin/list','admin/auth'),
	('admin/list','admin/delete'),
	('admin/list','admin/edit'),
	('admin','admin/list'),
	('blog','article/list'),
	('blog','cate/list'),
	('menu/list','menu/add'),
	('menu/list','menu/delete'),
	('menu/list','menu/edit'),
	('admin','menu/list'),
	('menu/list','menu/sort'),
	('blog','music/list'),
	('permission/list','permission/add'),
	('permission/list','permission/delete'),
	('permission/list','permission/edit'),
	('admin','permission/list'),
	('blog','picture/list'),
	('role/list','role/add'),
	('role/list','role/delete'),
	('role/list','role/edit'),
	('admin','role/list'),
	('task/list','task/add'),
	('task/list','task/delete'),
	('task/list','task/edit'),
	('admin','task/list'),
	('blog','user/list'),
	('blog','video/list');

/*!40000 ALTER TABLE `md_auth_item_child` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table md_menu
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_menu`;

CREATE TABLE `md_menu` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `pid` int(11) unsigned NOT NULL COMMENT '父级ID',
  `name` varchar(40) NOT NULL DEFAULT '' COMMENT '名称',
  `icon` varchar(30) NOT NULL DEFAULT '' COMMENT 'ICON',
  `url` varchar(40) NOT NULL DEFAULT '' COMMENT '地址',
  `sort` smallint(5) unsigned NOT NULL DEFAULT '100' COMMENT '排序',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `INDEX_PID` (`pid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='菜单表';

LOCK TABLES `md_menu` WRITE;
/*!40000 ALTER TABLE `md_menu` DISABLE KEYS */;

INSERT INTO `md_menu` (`id`, `pid`, `name`, `icon`, `url`, `sort`, `created_at`)
VALUES
	(1,0,'后台管理','menu-icon fa fa-cog','admin',1,1494403964),
	(2,1,'用户管理','icon','admin/list',1000,1494404030),
	(3,1,'角色管理','icon','role/list',1001,1494404363),
	(4,1,'权限管理','icon','permission/list',1002,1494404391),
	(5,1,'菜单管理','icon','menu/list',1003,1494404401),
	(6,1,'任务管理','icon','task/list',1004,1494404421),
	(7,1,'日志管理','icon','operate/list',1005,1494404430),
	(8,0,'博客管理','menu-icon fa fa-home','blog',2,1494548740),
	(9,8,'文章管理','icon','article/list',1008,1494548826),
	(10,8,'图片管理','icon','picture/list',1009,1494548878),
	(11,8,'音乐管理','icon','music/list',1010,1494548905),
	(12,8,'视频管理','icon','video/list',1011,1494548936),
	(13,8,'用户管理','icon','user/list',1006,1494548961),
	(14,8,'分类管理','icon','cate/list',1007,1494553902);

/*!40000 ALTER TABLE `md_menu` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table md_operate_log
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_operate_log`;

CREATE TABLE `md_operate_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增',
  `operate_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '操作ID',
  `type` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '操作类型',
  `module` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '操作模块',
  `describe` varchar(40) CHARACTER SET utf8 NOT NULL DEFAULT 'NUll' COMMENT '操作描述',
  `admin_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '操作人',
  `ip` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'IP',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '添加时间',
  PRIMARY KEY (`id`),
  KEY `INDEX_OPERATE` (`type`,`module`,`admin_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='操作日志表';

LOCK TABLES `md_operate_log` WRITE;
/*!40000 ALTER TABLE `md_operate_log` DISABLE KEYS */;

INSERT INTO `md_operate_log` (`id`, `operate_id`, `type`, `module`, `describe`, `admin_id`, `ip`, `created_at`)
VALUES
	(1,7,2,2,'',1,2130706433,1494485043),
	(2,4,1,1,'',1,2130706433,1494493023),
	(3,4,2,1,'',1,2130706433,1494493115),
	(4,5,1,1,'',1,2130706433,1494493345),
	(5,5,2,1,'',1,2130706433,1494493423),
	(6,5,2,1,'',1,2130706433,1494493434),
	(7,5,3,1,'',1,2130706433,1494493443),
	(8,0,3,5,'删除admin/enable',1,2130706433,1494493800),
	(9,0,3,5,'删除admin/disable',1,2130706433,1494493805),
	(10,0,3,5,'删除task/enable',1,2130706433,1494493820),
	(11,0,3,5,'删除task/disable',1,2130706433,1494493825),
	(12,8,1,2,'',1,2130706433,1494548740),
	(13,9,1,2,'',1,2130706433,1494548826),
	(14,10,1,2,'',1,2130706433,1494548878),
	(15,11,1,2,'',1,2130706433,1494548905),
	(16,12,1,2,'',1,2130706433,1494548936),
	(17,13,1,2,'',1,2130706433,1494548961),
	(18,2,1,5,'',1,2130706433,1494552373),
	(19,1,2,5,'',1,2130706433,1494552557),
	(20,1,3,5,'',1,2130706433,1494552589),
	(21,14,1,2,'',1,2130706433,1494553903);

/*!40000 ALTER TABLE `md_operate_log` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table md_task
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_task`;

CREATE TABLE `md_task` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT '任务名称',
  `program` varchar(64) NOT NULL DEFAULT '' COMMENT '执行程序',
  `describe` varchar(255) NOT NULL COMMENT '任务描述',
  `type` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '任务类型（1-执行一次 2-循环执行 3-每日固定时间）',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '任务状态（1-未开始 2-执行中 3-已结束 4-执行失败）',
  `start_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '任务开始时间',
  `last_start_time` int(11) unsigned NOT NULL COMMENT '上次执行时间',
  `last_end_start` int(11) unsigned NOT NULL COMMENT '上次结束时间',
  `created_at` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='任务表';

LOCK TABLES `md_task` WRITE;
/*!40000 ALTER TABLE `md_task` DISABLE KEYS */;

INSERT INTO `md_task` (`id`, `name`, `program`, `describe`, `type`, `status`, `start_time`, `last_start_time`, `last_end_start`, `created_at`)
VALUES
	(2,'测试','test/index','测试任务啦',1,1,1494564330,0,0,1494552373);

/*!40000 ALTER TABLE `md_task` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table md_task_log
# ------------------------------------------------------------

DROP TABLE IF EXISTS `md_task_log`;

CREATE TABLE `md_task_log` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `task_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '任务ID',
  `start_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '开始执行时间',
  `end_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '结束执行时间',
  `info` varchar(255) NOT NULL DEFAULT '' COMMENT '日志信息',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='任务日志表';

LOCK TABLES `md_task_log` WRITE;
/*!40000 ALTER TABLE `md_task_log` DISABLE KEYS */;

INSERT INTO `md_task_log` (`id`, `task_id`, `start_time`, `end_time`, `info`)
VALUES
	(1,2,0,0,'2017-05-12 12:45:30---->测试<br/>2017-05-12 12:45:30---->测试<br/>2017-05-12 12:45:30---->测试<br/>2017-05-12 12:45:30---->测试<br/>2017-05-12 12:45:30---->测试<br/>2017-05-12 12:45:30---->测试<br/>2017-05-12 12:45:30---->测试<br/>2017-05-12 12:45:30---->测试<br/>2017-05');

/*!40000 ALTER TABLE `md_task_log` ENABLE KEYS */;
UNLOCK TABLES;



/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
